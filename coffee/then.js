// Generated by CoffeeScript 1.6.3
(function() {
  var slice, thenjs;

  slice = [].slice;

  thenjs = function(startFn) {
    var Promise, createHandler, defer, fail, nextTick, promise, _ref;
    fail = [];
    nextTick = (_ref = typeof process !== "undefined" && process !== null ? process.nextTick : void 0) != null ? _ref : setTimeout;
    createHandler = function(promise, handler) {
      var defer;
      defer = promise.defer.bind(promise);
      defer._next_then = promise;
      if (typeof handler === 'function') {
        if (handler._next_then) {
          return handler;
        } else {
          return handler.bind(null, defer);
        }
      }
    };
    Promise = (function() {
      function Promise() {}

      Promise.prototype.all = function(allHandler) {
        var promise;
        promise = new Promise();
        this._all = createHandler(promise, allHandler);
        return promise;
      };

      Promise.prototype.then = function(successHandler, errorHandler) {
        var promise;
        promise = new Promise();
        this._success = createHandler(promise, successHandler);
        this._error = createHandler(promise, errorHandler);
        return promise;
      };

      Promise.prototype.fail = function(errorHandler) {
        var promise;
        promise = new Promise();
        this._fail = createHandler(promise, errorHandler);
        this._success = promise.defer.bind(promise, null);
        if (this._fail) {
          fail.push(this._fail);
        }
        return promise;
      };

      Promise.prototype.defer = function(err) {
        this._error = this._fail ? fail.shift() : this._error;
        if (this._all) {
          return this._all.apply(this._all._next_then || null, slice.call(arguments));
        } else if (err == null) {
          if (this._success) {
            return this._success.apply(this._success._next_then || null, slice.call(arguments, 1));
          }
        } else if (this._error || fail.length) {
          if (this._error) {
            return this._error(err);
          } else {
            return fail.shift()(err);
          }
        } else {
          throw err;
        }
      };

      return Promise;

    })();
    promise = new Promise();
    defer = promise.defer.bind(promise);
    defer._next_then = promise;
    nextTick(typeof startFn === 'function' ? startFn.bind(null, defer) : defer);
    return promise;
  };

  thenjs.each = function(array, iterator, context) {
    var end, i, next;
    next = function() {
      i += 1;
      return iterator.call(context, (i < end ? next : null), array[i], i, array);
    };
    iterator || (iterator = function() {});
    if (Array.isArray(array)) {
      i = -1;
      end = array.length - 1;
      return next();
    } else {
      throw new Error("First argument " + array + " is not a array!");
    }
  };

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = thenjs;
  } else if (typeof define === 'function') {
    define(function() {
      return thenjs;
    });
  }

  if (typeof window === 'object') {
    window.then = thenjs;
  }

  return thenjs;

}).call(this);
